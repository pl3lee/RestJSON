// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(provider_id, email, name)
VALUES ($1, $2, $3)
ON CONFLICT(provider_id)
DO UPDATE SET email=$2, name=$3
RETURNING id, provider_id, created_at, updated_at, email, name, stripe_customer_id, subscribed
`

type CreateUserParams struct {
	ProviderID string
	Email      string
	Name       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ProviderID, arg.Email, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.Subscribed,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByCustomerId = `-- name: GetUserByCustomerId :one
SELECT id, provider_id, created_at, updated_at, email, name, stripe_customer_id, subscribed
FROM users
WHERE stripe_customer_id=$1
`

func (q *Queries) GetUserByCustomerId(ctx context.Context, stripeCustomerID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByCustomerId, stripeCustomerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.Subscribed,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, provider_id, created_at, updated_at, email, name, stripe_customer_id, subscribed
FROM users
WHERE id=$1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.Subscribed,
	)
	return i, err
}

const getUserByProviderId = `-- name: GetUserByProviderId :one
SELECT id, provider_id, created_at, updated_at, email, name, stripe_customer_id, subscribed
FROM users
WHERE provider_id=$1
`

func (q *Queries) GetUserByProviderId(ctx context.Context, providerID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderId, providerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.Subscribed,
	)
	return i, err
}

const updateCustomerId = `-- name: UpdateCustomerId :one
UPDATE users
SET stripe_customer_id=$2, updated_at=NOW()
WHERE id=$1
RETURNING id, provider_id, created_at, updated_at, email, name, stripe_customer_id, subscribed
`

type UpdateCustomerIdParams struct {
	ID               uuid.UUID
	StripeCustomerID string
}

func (q *Queries) UpdateCustomerId(ctx context.Context, arg UpdateCustomerIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerId, arg.ID, arg.StripeCustomerID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.Subscribed,
	)
	return i, err
}

const updateCustomerSubscriptionStatus = `-- name: UpdateCustomerSubscriptionStatus :one
UPDATE users
SET subscribed=$2, updated_at=NOW()
WHERE stripe_customer_id=$1
RETURNING id, provider_id, created_at, updated_at, email, name, stripe_customer_id, subscribed
`

type UpdateCustomerSubscriptionStatusParams struct {
	StripeCustomerID string
	Subscribed       bool
}

func (q *Queries) UpdateCustomerSubscriptionStatus(ctx context.Context, arg UpdateCustomerSubscriptionStatusParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerSubscriptionStatus, arg.StripeCustomerID, arg.Subscribed)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Name,
		&i.StripeCustomerID,
		&i.Subscribed,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: json.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewJson = `-- name: CreateNewJson :one
INSERT INTO json_files (id, user_id, file_name, url)
VALUES($1, $2, $3, $4)
RETURNING id, created_at, updated_at, user_id, file_name, url
`

type CreateNewJsonParams struct {
	ID       uuid.UUID
	UserID   uuid.UUID
	FileName string
	Url      string
}

func (q *Queries) CreateNewJson(ctx context.Context, arg CreateNewJsonParams) (JsonFile, error) {
	row := q.db.QueryRowContext(ctx, createNewJson,
		arg.ID,
		arg.UserID,
		arg.FileName,
		arg.Url,
	)
	var i JsonFile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FileName,
		&i.Url,
	)
	return i, err
}

const deleteJsonFile = `-- name: DeleteJsonFile :exec
DELETE FROM json_files
WHERE id=$1
`

func (q *Queries) DeleteJsonFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteJsonFile, id)
	return err
}

const getJsonFile = `-- name: GetJsonFile :one
SELECT id, created_at, updated_at, user_id, file_name, url
FROM json_files
WHERE id=$1
`

func (q *Queries) GetJsonFile(ctx context.Context, id uuid.UUID) (JsonFile, error) {
	row := q.db.QueryRowContext(ctx, getJsonFile, id)
	var i JsonFile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FileName,
		&i.Url,
	)
	return i, err
}

const getJsonFiles = `-- name: GetJsonFiles :many
SELECT id, created_at, updated_at, user_id, file_name, url
FROM json_files
WHERE user_id=$1
`

func (q *Queries) GetJsonFiles(ctx context.Context, userID uuid.UUID) ([]JsonFile, error) {
	rows, err := q.db.QueryContext(ctx, getJsonFiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JsonFile
	for rows.Next() {
		var i JsonFile
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FileName,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameJsonFile = `-- name: RenameJsonFile :one
UPDATE json_files
SET file_name=$2, updated_at=NOW()
WHERE id=$1
RETURNING id, created_at, updated_at, user_id, file_name, url
`

type RenameJsonFileParams struct {
	ID       uuid.UUID
	FileName string
}

func (q *Queries) RenameJsonFile(ctx context.Context, arg RenameJsonFileParams) (JsonFile, error) {
	row := q.db.QueryRowContext(ctx, renameJsonFile, arg.ID, arg.FileName)
	var i JsonFile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FileName,
		&i.Url,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_sessions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getSession = `-- name: GetSession :one
SELECT id, user_id, created_at, updated_at, expires_at
FROM user_sessions
WHERE id=$1
`

func (q *Queries) GetSession(ctx context.Context, id string) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const invalidateAllSessions = `-- name: InvalidateAllSessions :exec
DELETE FROM user_sessions
where user_id=$1
`

func (q *Queries) InvalidateAllSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, invalidateAllSessions, userID)
	return err
}

const invalidateSession = `-- name: InvalidateSession :exec
DELETE FROM user_sessions
WHERE id=$1
`

func (q *Queries) InvalidateSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, invalidateSession, id)
	return err
}

const storeUserSession = `-- name: StoreUserSession :one
INSERT INTO user_sessions (id, user_id, expires_at)
VALUES($1, $2, $3)
RETURNING id, user_id, created_at, updated_at, expires_at
`

type StoreUserSessionParams struct {
	ID        string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) StoreUserSession(ctx context.Context, arg StoreUserSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, storeUserSession, arg.ID, arg.UserID, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE user_sessions
SET expires_at=$2, updated_at=NOW()
WHERE id=$1
RETURNING id, user_id, created_at, updated_at, expires_at
`

type UpdateSessionParams struct {
	ID        string
	ExpiresAt time.Time
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, updateSession, arg.ID, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

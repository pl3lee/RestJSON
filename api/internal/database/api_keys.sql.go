// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_keys.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createApiKey = `-- name: CreateApiKey :one
INSERT INTO api_keys(user_id, key_hash, name)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, user_id, key_hash, last_used_at, name
`

type CreateApiKeyParams struct {
	UserID  uuid.UUID
	KeyHash string
	Name    string
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createApiKey, arg.UserID, arg.KeyHash, arg.Name)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.KeyHash,
		&i.LastUsedAt,
		&i.Name,
	)
	return i, err
}

const deleteApiKey = `-- name: DeleteApiKey :exec
DELETE FROM api_keys
WHERE key_hash=$1
`

func (q *Queries) DeleteApiKey(ctx context.Context, keyHash string) error {
	_, err := q.db.ExecContext(ctx, deleteApiKey, keyHash)
	return err
}

const getAllApiKeys = `-- name: GetAllApiKeys :many
SELECT id, created_at, updated_at, user_id, key_hash, last_used_at, name
FROM api_keys
WHERE user_id=$1
`

func (q *Queries) GetAllApiKeys(ctx context.Context, userID uuid.UUID) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, getAllApiKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.KeyHash,
			&i.LastUsedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFromApiKeyHash = `-- name: GetUserFromApiKeyHash :one
SELECT id, created_at, updated_at, user_id, key_hash, last_used_at, name
FROM api_keys
WHERE key_hash=$1
`

func (q *Queries) GetUserFromApiKeyHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getUserFromApiKeyHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.KeyHash,
		&i.LastUsedAt,
		&i.Name,
	)
	return i, err
}

const updateApiKeyLastUsed = `-- name: UpdateApiKeyLastUsed :exec
UPDATE api_keys
SET updated_at=NOW(), last_used_at=NOW()
WHERE key_hash=$1
`

func (q *Queries) UpdateApiKeyLastUsed(ctx context.Context, keyHash string) error {
	_, err := q.db.ExecContext(ctx, updateApiKeyLastUsed, keyHash)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: api_keys.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAPiKey = `-- name: CreateAPiKey :one
INSERT INTO api_keys(user_id, key_hash)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, user_id, key_hash, last_used_at
`

type CreateAPiKeyParams struct {
	UserID  uuid.UUID
	KeyHash string
}

func (q *Queries) CreateAPiKey(ctx context.Context, arg CreateAPiKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createAPiKey, arg.UserID, arg.KeyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.KeyHash,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteApiKey = `-- name: DeleteApiKey :exec
DELETE FROM api_keys
WHERE key_hash=$1
`

func (q *Queries) DeleteApiKey(ctx context.Context, keyHash string) error {
	_, err := q.db.ExecContext(ctx, deleteApiKey, keyHash)
	return err
}

const getUserFromApiKeyHash = `-- name: GetUserFromApiKeyHash :one
SELECT id, created_at, updated_at, user_id, key_hash, last_used_at
FROM api_keys
WHERE key_hash=$1
`

func (q *Queries) GetUserFromApiKeyHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getUserFromApiKeyHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.KeyHash,
		&i.LastUsedAt,
	)
	return i, err
}

const updateApiKeyLastUsed = `-- name: UpdateApiKeyLastUsed :exec
UPDATE api_keys
SET updated_at=NOW(), last_used_at=NOW()
WHERE key_hash=$1
`

func (q *Queries) UpdateApiKeyLastUsed(ctx context.Context, keyHash string) error {
	_, err := q.db.ExecContext(ctx, updateApiKeyLastUsed, keyHash)
	return err
}
